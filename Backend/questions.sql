CREATE TABLE IF NOT EXISTS topics (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS questions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    topic_id INT,
    question TEXT NOT NULL,
    option1 VARCHAR(255) NOT NULL,
    option2 VARCHAR(255) NOT NULL,
    option3 VARCHAR(255) NOT NULL,
    option4 VARCHAR(255) NOT NULL,
    correct_option INT NOT NULL,
    FOREIGN KEY (topic_id) REFERENCES topics(id) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO topics (name) VALUES
('SELECT'), ('FROM'), ('WHERE'), ('ORDER BY'), ('LIMIT / OFFSET'), ('DISTINCT'),
('=, !=, <, >, <=, >='), ('BETWEEN'), ('IN'), ('LIKE'), ('IS NULL / IS NOT NULL'),
('COUNT()'), ('SUM()'), ('AVG()'), ('MIN() / MAX()'), ('GROUP BY'), ('HAVING'),
('INNER JOIN'), ('LEFT JOIN'), ('RIGHT JOIN'), ('INSERT INTO'), ('UPDATE'), ('DELETE FROM'),
('FULL JOIN'), ('SELF JOIN'), ('CROSS JOIN'), ('EXISTS'), ('ANY / ALL'), ('Subqueries (SELECT inside another query)'),
('WITH (CTEs)'), ('CREATE VIEW'), ('DROP VIEW'), ('CREATE INDEX'), ('DROP INDEX'), ('EXPLAIN / EXPLAIN ANALYZE'),
('START TRANSACTION'), ('COMMIT'), ('ROLLBACK'), ('SAVEPOINT'), ('LOCK TABLES / UNLOCK TABLES'),
('CREATE PROCEDURE'), ('CALL'), ('SET TRANSACTION ISOLATION LEVEL'), ('INDEX HINTS'), ('PARTITIONING'),
('OPTIMIZE TABLE'), ('ANALYZE TABLE'), ('SHOW MASTER STATUS'), ('SHOW SLAVE STATUS'), ('CHANGE MASTER TO'),
('GRANT'), ('REVOKE'), ('CREATE USER'), ('DROP USER'), ('ALTER USER'),
('CREATE FUNCTION'), ('RETURN'), ('DECLARE'), ('CURSOR'),
('BACKUP DATABASE'), ('RESTORE DATABASE'), ('mysqldump'), ('EVENT SCHEDULER');

INSERT INTO questions (topic_id, question, option1, option2, option3, option4, correct_option) VALUES
(16, 'What is the purpose of the GROUP BY clause in SQL?', 'To filter the rows returned by a query', 'To sort the result set in ascending or descending order', 'To group rows that have the same values in specified columns into aggregated results', 'To remove duplicate rows from the result set', 3),
(16, 'Which of the following statements is true about GROUP BY?', 'GROUP BY must always be used with HAVING', 'GROUP BY is used to apply aggregate functions like SUM(), AVG(), COUNT() to grouped data', 'GROUP BY can only be used with numeric columns', 'GROUP BY and ORDER BY are the same', 2),
(16, 'Which SQL statement correctly uses GROUP BY to count the number of employees in each department?', 'SELECT department, COUNT(*) FROM employees;', 'SELECT department, COUNT(*) FROM employees GROUP BY department;', 'SELECT department, COUNT(*) FROM employees ORDER BY department;', 'SELECT COUNT(*) FROM employees GROUP BY department;', 2),
(16, 'Which of the given statements is considered "TRUE" about an SQL query?', 'P and R', 'P and S', 'Q and R', 'Q and S', 2),
(16, 'Write an SQL query to find the categories where total sales exceed 1500.', 'SELECT Category, SUM(SaleAmount) FROM Sales WHERE SUM(SaleAmount) > 1500 GROUP BY Category;', 'SELECT Category, SUM(SaleAmount) FROM Sales GROUP BY Category HAVING SUM(SaleAmount) > 1500;', 'SELECT Category FROM Sales WHERE SaleAmount > 1500 GROUP BY Category;', 'SELECT Category, COUNT(SaleAmount) FROM Sales GROUP BY Category HAVING COUNT(SaleAmount) > 1500;', 2),
(17, 'Which of the following statements correctly explains the difference between WHERE and HAVING?', 'WHERE filters rows before aggregation, while HAVING filters groups after aggregation', 'HAVING filters rows before aggregation, while WHERE filters groups after aggregation', 'Both WHERE and HAVING are used for filtering rows before aggregation', 'HAVING can only be used with ORDER BY', 1),
(17, 'Write an SQL query to return categories where the total sales amount is greater than the average total sales across all categories.', 'SELECT Category, SUM(SaleAmount) FROM Sales GROUP BY Category HAVING SUM(SaleAmount) > (SELECT AVG(SaleAmount) FROM Sales);', 'SELECT Category, AVG(SaleAmount) FROM Sales GROUP BY Category HAVING SUM(SaleAmount) > (SELECT SUM(SaleAmount)/COUNT(DISTINCT Category) FROM Sales);', 'SELECT Category FROM Sales WHERE SUM(SaleAmount) > (SELECT AVG(SaleAmount) FROM Sales) GROUP BY Category;', 'SELECT Category, COUNT(SaleAmount) FROM Sales GROUP BY Category HAVING COUNT(SaleAmount) > (SELECT AVG(SaleAmount) FROM Sales);', 1),
(17, 'Find customers who have placed at least 2 orders and have a total order amount greater than 1000.', 'SELECT CustomerID FROM Orders HAVING COUNT(*) >= 2 AND SUM(OrderAmount) > 1000;', 'SELECT CustomerID FROM Orders GROUP BY CustomerID HAVING COUNT(OrderID) >= 2 AND SUM(OrderAmount) > 1000;', 'SELECT CustomerID, COUNT(*) FROM Orders HAVING SUM(OrderAmount) > 1000 GROUP BY CustomerID WHERE COUNT(*) >= 2;', 'SELECT CustomerID FROM Orders WHERE COUNT(*) >= 2 AND SUM(OrderAmount) > 1000 GROUP BY CustomerID;', 2),
(17, 'Find the number of customers who have made at least one purchase in Electronics and spent a total of more than 2000 across all categories.', 'SELECT COUNT(CustomerID) FROM Purchases GROUP BY CustomerID HAVING SUM(Amount) > 2000 AND COUNT(DISTINCT Category) >= 1;', 'SELECT COUNT(CustomerID) FROM Purchases WHERE Category = "Electronics" GROUP BY CustomerID HAVING SUM(Amount) > 2000;', 'SELECT COUNT(CustomerID) FROM (SELECT CustomerID FROM Purchases GROUP BY CustomerID HAVING SUM(Amount) > 2000 AND SUM(CASE WHEN Category = "Electronics" THEN 1 ELSE 0 END) > 0) AS subquery;', 'SELECT COUNT(DISTINCT CustomerID) FROM Purchases GROUP BY CustomerID HAVING SUM(Amount) > 2000 AND MAX(CASE WHEN Category = "Electronics" THEN 1 ELSE 0 END) = 1;', 4),
(17, 'Write an SQL query to return AccountIDs where the total deposit amount exceeds 1000 and the total withdrawal amount is below 500.', 'SELECT AccountID FROM Transactions WHERE TransactionType = "Deposit" GROUP BY AccountID HAVING SUM(Amount) > 1000 AND SUM(CASE WHEN TransactionType = "Withdrawal" THEN Amount ELSE 0 END) < 500;', 'SELECT AccountID FROM Transactions GROUP BY AccountID HAVING SUM(CASE WHEN TransactionType = "Deposit" THEN Amount ELSE 0 END) > 1000 AND SUM(CASE WHEN TransactionType = "Withdrawal" THEN Amount ELSE 0 END) < 500;', 'SELECT AccountID FROM Transactions GROUP BY AccountID HAVING SUM(Amount) > 1000 AND SUM(Amount) < 500;', 'SELECT AccountID FROM Transactions WHERE SUM(Amount) > 1000 AND SUM(Amount) < 500 GROUP BY AccountID;', 2),
(11, 'Which SQL query correctly retrieves all rows where the `email` column is **NULL** in a `Users` table?', 'SELECT * FROM Users WHERE email = NULL;', 'SELECT * FROM Users WHERE email IS NULL;', 'SELECT * FROM Users WHERE email == NULL;', 'SELECT * FROM Users WHERE email = "NULL";', 2),
(11, 'What does the following SQL query do? SELECT name FROM Employees WHERE salary IS NOT NULL;', 'Retrieves employees with NULL salaries', 'Retrieves employees with a salary value (non-NULL)', 'Retrieves employees with salary greater than 0', 'Throws an error', 2),
(11, 'Given a `Products` table:\n| ProductID | Name     | Price  |\n|-----------|---------|--------|\n| 1         | Laptop  | 50000  |\n| 2         | Mouse   | NULL   |\n| 3         | Keyboard| 2500   |\n| 4         | Monitor | NULL   |\nWhat will this query return? SELECT COUNT(Price) FROM Products;', '4', '2', '0', 'NULL', 2),
(11, 'You have a `Students` table with columns: | StudentID | Name    | Score  |\nWhich query correctly returns the average score, treating NULL as missing data?', 'SELECT AVG(Score) FROM Students;', 'SELECT AVG(COALESCE(Score, 0)) FROM Students;', 'SELECT SUM(Score) / COUNT(*) FROM Students;', 'SELECT SUM(Score) / COUNT(Score) FROM Students;', 1),
(11, 'Finding Customers Without Orders. You have two tables:\nCustomers Table:\n| CustomerID | Name   |\n|------------|--------|\n| 1          | Alice  |\n| 2          | Bob    |\n| 3          | Charlie|\n| 4          | David  |\nOrders Table:\n| OrderID | CustomerID | Amount |\n|---------|-----------|--------|\n| 101     | 1         | 200    |\n| 102     | 3         | 300    |\nWhich SQL query correctly finds customers who **have never placed an order**?', 'SELECT Name FROM Customers WHERE CustomerID NOT IN (SELECT CustomerID FROM Orders);', 'SELECT Name FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE CustomerID IS NULL);', 'SELECT Name FROM Customers WHERE CustomerID NOT EXISTS (SELECT CustomerID FROM Orders);', 'SELECT Name FROM Customers WHERE CustomerID IS NULL;', 1),
(8, 'Which of the following queries correctly selects employees with salaries between 30000 and 60000?', 'SELECT * FROM employees WHERE salary >= 30000 AND salary <= 60000;', 'SELECT * FROM employees WHERE salary BETWEEN 30000 AND 60000;', 'SELECT * FROM employees WHERE salary > 30000 AND salary < 60000;', 'Both A and B', 4),
(8, 'What does the BETWEEN operator include by default in SQL?', 'Only the lower bound', 'Only the upper bound', 'Both lower and upper bounds', 'Neither lower nor upper bound', 3),
(8, 'Which query correctly finds products priced between 100 and 500, excluding both limits?', 'SELECT * FROM products WHERE price BETWEEN 101 AND 499;', 'SELECT * FROM products WHERE price > 100 AND price < 500;', 'SELECT * FROM products WHERE price BETWEEN 100 AND 500;', 'SELECT * FROM products WHERE price >= 101 AND price <= 499;', 2),
(8, 'A table "Orders" has a column "OrderDate". How can you select orders placed in the first half of 2023?', 'SELECT * FROM Orders WHERE OrderDate BETWEEN "2023-01-01" AND "2023-06-30";', 'SELECT * FROM Orders WHERE OrderDate >= "2023-01-01" AND OrderDate <= "2023-06-30";', 'SELECT * FROM Orders WHERE OrderDate BETWEEN "2023-06-30" AND "2023-01-01";', 'Both A and B', 4),
(8, 'Given a "Students" table with "Score" column, find students who scored between the average score and the maximum score.', 'SELECT * FROM Students WHERE Score BETWEEN (SELECT AVG(Score) FROM Students) AND (SELECT MAX(Score) FROM Students);', 'SELECT * FROM Students WHERE Score >= (SELECT AVG(Score) FROM Students) AND Score <= (SELECT MAX(Score) FROM Students);', 'SELECT * FROM Students WHERE Score > (SELECT AVG(Score) FROM Students) AND Score < (SELECT MAX(Score) FROM Students);', 'Both A and B', 4),
(15, 'Which of the following queries correctly selects the minimum and maximum salary of employees?', 'SELECT MIN(salary), MAX(salary) FROM employees;', 'SELECT salary FROM employees WHERE salary = MIN(salary) OR salary = MAX(salary);', 'SELECT MIN(salary) FROM employees UNION SELECT MAX(salary) FROM employees;', 'Both A and C', 4),
(15, 'What does the MAX() function return when applied to a column with only NULL values?', '0', 'NULL', 'Error', 'The highest possible value', 2),
(15, 'Which query finds the department with the highest average salary?', 'SELECT department, MAX(AVG(salary)) FROM employees GROUP BY department;', 'SELECT department FROM employees GROUP BY department HAVING AVG(salary) = (SELECT MAX(AVG(salary)) FROM employees GROUP BY department);', 'SELECT department FROM employees WHERE salary = (SELECT MAX(AVG(salary)) FROM employees GROUP BY department);', 'SELECT department FROM employees GROUP BY department ORDER BY AVG(salary) DESC LIMIT 1;', 4),
(15, 'A table "Products" contains columns "ProductName" and "Price". Find the most expensive product.', 'SELECT ProductName FROM Products WHERE Price = MAX(Price);', 'SELECT ProductName FROM Products WHERE Price = (SELECT MAX(Price) FROM Products);', 'SELECT ProductName FROM Products ORDER BY Price DESC LIMIT 1;', 'Both B and C', 4),
(15, 'Given a "Sales" table with "SaleAmount" column, how can you find the second-highest sale amount?', 'SELECT MAX(SaleAmount) FROM Sales WHERE SaleAmount < (SELECT MAX(SaleAmount) FROM Sales);', 'SELECT DISTINCT SaleAmount FROM Sales ORDER BY SaleAmount DESC LIMIT 1,1;', 'SELECT SaleAmount FROM Sales ORDER BY SaleAmount DESC LIMIT 1 OFFSET 1;', 'Both A and C', 4),
(23, 'Which of the following queries correctly deletes all rows from the "employees" table?', 'DELETE * FROM employees;', 'DELETE FROM employees;', 'DELETE ALL FROM employees;', 'DROP FROM employees;', 2),
(23, 'What is the main difference between DELETE and TRUNCATE?', 'DELETE is faster than TRUNCATE', 'TRUNCATE can be rolled back, but DELETE cannot', 'DELETE allows filtering with WHERE, while TRUNCATE removes all rows', 'DELETE does not remove data, while TRUNCATE does', 3),
(23, 'Which query correctly deletes only employees who have a salary less than 30000?', 'DELETE FROM employees;', 'DELETE FROM employees WHERE salary < 30000;', 'REMOVE FROM employees WHERE salary < 30000;', 'DELETE employees WHERE salary < 30000;', 2),
(23, 'A "Students" table has a foreign key reference to a "Courses" table. What happens when you try to delete a course that students are still enrolled in, without setting ON DELETE CASCADE?', 'The course is deleted, and students remain with NULL values in the course column', 'The course is deleted, and all related student records are also deleted', 'The deletion fails due to a foreign key constraint', 'The deletion succeeds, and the foreign key constraint is automatically removed', 3),
(23, 'Given a "Products" table, how can you delete all duplicate entries, keeping only one of each?', 'DELETE FROM Products WHERE id NOT IN (SELECT MIN(id) FROM Products GROUP BY ProductName);', 'DELETE FROM Products WHERE id IN (SELECT MIN(id) FROM Products GROUP BY ProductName);', 'DELETE DISTINCT FROM Products;', 'DELETE DUPLICATES FROM Products;', 1),
(20, 'Which of the following queries correctly retrieves all records from the "employees" table using RIGHT JOIN with the "departments" table?', 'SELECT * FROM employees RIGHT JOIN departments ON employees.dept_id = departments.id;', 'SELECT * FROM employees LEFT JOIN departments ON employees.dept_id = departments.id;', 'SELECT * FROM employees FULL JOIN departments ON employees.dept_id = departments.id;', 'SELECT * FROM employees INNER JOIN departments ON employees.dept_id = departments.id;', 1),  
(20, 'What is the primary difference between RIGHT JOIN and LEFT JOIN?', 'RIGHT JOIN returns all records from the left table, whereas LEFT JOIN returns all records from the right table', 'RIGHT JOIN returns all records from the right table, whereas LEFT JOIN returns all records from the left table', 'RIGHT JOIN and LEFT JOIN return the same results', 'RIGHT JOIN can only be used with aggregate functions', 2),  
(20, 'Given two tables, "Orders" and "Customers," which query retrieves all customers along with their orders, including customers who have not placed any orders?', 'SELECT * FROM Orders RIGHT JOIN Customers ON Orders.customer_id = Customers.id;', 'SELECT * FROM Customers RIGHT JOIN Orders ON Customers.id = Orders.customer_id;', 'SELECT * FROM Customers LEFT JOIN Orders ON Customers.id = Orders.customer_id;', 'SELECT * FROM Customers INNER JOIN Orders ON Customers.id = Orders.customer_id;', 3),  
(20, 'Suppose you have a "Students" table and a "Courses" table. How do you retrieve all courses and the students enrolled in them, including courses with no students?', 'SELECT * FROM Students RIGHT JOIN Courses ON Students.course_id = Courses.id;', 'SELECT * FROM Courses RIGHT JOIN Students ON Courses.id = Students.course_id;', 'SELECT * FROM Courses LEFT JOIN Students ON Courses.id = Students.course_id;', 'SELECT * FROM Students INNER JOIN Courses ON Students.course_id = Courses.id;', 3),  
(20, 'Which of the following statements is true about RIGHT JOIN?', 'RIGHT JOIN returns only matching rows between both tables', 'RIGHT JOIN is equivalent to INNER JOIN', 'RIGHT JOIN returns all rows from the right table and matching rows from the left table', 'RIGHT JOIN is slower than LEFT JOIN in all cases', 3);



